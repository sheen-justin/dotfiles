"source $VIMRUNTIME/defaults.vim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set history=1024 		" Sets how many lines of history VIM has to remember

" Enable filetype plugins
filetype plugin on
filetype indent on

set autoread			" Set to auto read when a file is changed from the outside

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = " "

" Fast saving
nmap <leader>s :w!<cr>
nmap <leader>l :q<cr>

" Using tpope/vim-commentary
nmap <leader>/ gcc

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set so=128				" Center cursor - when moving vertically using j/k

" Turn on the Wild menu
set wildmenu
if !has('nvim')
	set wildmode=list:longest,list:full
endif

set ruler				" Always show current position
set cmdheight=1			" Height of the command bar

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l
set bs=2

set ignorecase			" Ignore case when searching
set smartcase			" When searching try to be smart about cases 
set hlsearch			" Highlight search results
set incsearch			" Makes search act like search in modern browsers
set lazyredraw			" Don't redraw while executing macros (good performance config)
set magic				" For regular expressions turn magic on
set showmatch			" Show matching brackets when text indicator is over them
set mat=2				" How many tenths of a second to blink when matching brackets

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Add numbers on the left
set number
set numberwidth=4

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable			" Enable syntax highlighting
set encoding=utf8		" Set utf8 as standard encoding and en_US as the standard language
set ffs=unix,dos,mac	" Use Unix as the standard file type

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
"set nobackup
"set nowb
"set noswapfile

if has('nvim')
	set undodir=~/.vim/undodir/
else
	set undodir=~/.vim/undodir/vim/
	set viminfo+=n~/.vim/.viminfo
endif

set undofile

set backupdir=~/.vim/backupdir/
set directory=~/.vim/backupdir/

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set noexpandtab			"Use hard tabs always

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4
set softtabstop=0

set lbr					" Linebreak on 500 characters
set ai					" Auto indent
set si					" Smart indent
set wrap				" Wrap lines

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin Stuff
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set showbreak=â†ª\ 

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

call plug#begin()

Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'

Plug 'airblade/vim-gitgutter'

Plug 'sheenjustin/vim-monokai-tasty'

Plug 'sheenjustin/cf-utils.vim'
Plug 'dag/vim-fish'

Plug 'neoclide/coc.nvim', { 'branch': 'release' }
Plug 'sunaku/tmux-navigate'
if !has('nvim')
	Plug 'nathanaelkane/vim-indent-guides'
	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'
endif

if has('nvim')
	Plug 'f-person/git-blame.nvim'
	Plug 'lukas-reineke/indent-blankline.nvim'
	Plug 'nvim-lualine/lualine.nvim'
	Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
	Plug 'nvim-tree/nvim-web-devicons'
endif

call plug#end()

colorscheme vim-monokai-tasty

inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<C-g>u\<CR>"

if !has('nvim')
	"enable airline arrows with powerline fonts
	let g:airline_powerline_fonts = 1
	let g:airline_theme='base16_monokai'
endif

if has('nvim')
	let g:gitblame_date_format = '%Y-%m-%d %H:%M'
lua <<EOF
	require('lualine').setup({ options={theme='powerline_dark'}})
	require'nvim-treesitter.configs'.setup{highlight={enable=true}}
	require('gitblame').setup()

	local highlight = {
		"RainbowViolet",
		"RainbowBlue",
		"RainbowGreen",
		"RainbowYellow",
		"RainbowOrange",
		"RainbowRed",
		"RainbowGray"
	}

	local hooks = require "ibl.hooks"
	-- create the highlight groups in the highlight setup hook, so they are reset
	-- every time the colorscheme changes
	hooks.register(hooks.type.HIGHLIGHT_SETUP, function()
		vim.api.nvim_set_hl(0, "RainbowGreen", { fg = "#A6E22E" })
		vim.api.nvim_set_hl(0, "RainbowRed", { fg = "#F92672" })
		vim.api.nvim_set_hl(0, "RainbowBlue", { fg = "#66D9EF" })
		vim.api.nvim_set_hl(0, "RainbowYellow", { fg = "#E6DB74" })
		vim.api.nvim_set_hl(0, "RainbowOrange", { fg = "#FD971F" })
		vim.api.nvim_set_hl(0, "RainbowViolet", { fg = "#AE81FF" })
		vim.api.nvim_set_hl(0, "RainbowGray", { fg = "#75715E" })
	end)

	require("ibl").setup { indent = { highlight = highlight } }
EOF
endif
